<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀)-->
<mapper namespace="com.leon.mybatis.userMapper">
    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
 使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
 resultType="me.gacl.domain.User"就表示将查询结果封装成一个User类的对象返回
User类就是users表所对应的实体类-->
    <!--根据id查询得到一个user对象-->
    <select id="getUser" parameterType="int"
            resultType="User">
             select * from users where id=#{id}
         </select>
    <select id="getAll" parameterType="int"
            resultType="User">
        SELECT * FROM users
    </select>
    <select id="findAll" parameterType="User" resultType="User">
        SELECT id,name,age FROM users
        <where>
            <if test="name != null">
                name=#{name}
            </if>
            <if test="age != null">
                and age=#{age}
            </if>
        </where>
    </select>

    <insert id="insertUser" parameterType="User">
        INSERT INTO users (id,name,age) VALUES (#{id},#{name},#{age})
    </insert>

    <update id="updateUser" parameterType="User">
        UPDATE users set name=#{name},age=#{age} WHERE id=#{id}
    </update>
    <update id="update" parameterType="User">
        UPDATE users
        <set>
            <if test="name != null">
                name = #{name},
            </if>
            <if test="age != null">
                age = #{age},
            </if>
        </set>
        WHERE id=#{id}
    </update>

    <delete id="deleteById" parameterType="integer">
        DELETE FROM users WHERE id=#{id}
    </delete>
    <delete id="deleteArray" parameterType="integer">
        DELETE FROM users WHERE id IN 
        <foreach collection="array" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>
    <delete id="deleteList" parameterType="integer">
        DELETE FROM users WHERE id IN
        <foreach collection="list" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>
    <delete id="deleteMap" parameterType="Map">
        DELETE FROM users WHERE id IN
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
        AND  age = #{age}
    </delete>
</mapper>